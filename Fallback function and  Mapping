 // SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;
contract LedgerBalance{
    mapping(address => uint) balance;
    mapping(address => string) name;
    function updateBalance() public returns(uint){
            balance[msg.sender]=20;
            return balance[msg.sender];
    }
    function senderInfo() public returns(string memory){
        name[msg.sender] = "Sameera";
        return name[msg.sender];
    }
    function printSender() public view returns(address){
        return msg.sender;
    }
}


Fallback
Code: a)
// SPDX-License-Identifier: MIT
pragma solidity 0.8.24;
 contract FallBackFunction {
 // fallback declaration as external always its declared with out name, parameter and does not
return any value.
 string public call;
 fallback() external payable {
 call = "I am a fallback function!";
 }
 function getBalance() public view returns (uint) {
 return address(this).balance;
 }
}


b)
//Creating the sender contract
contract Sender
{
 function transferEther() public payable
 {
 require (msg.value>=2 ether,"Insufficient Ether Sent");
 (bool sent,) = payable (0xf8e81D47203A594245E36C48e151709F0C19fBe8).call{value: 1
ether}("Transaction completed!");
 require(sent, "Transaction failed!");
 }
 function getBalance() public view returns(uint){
 return address(this).balance;
 }
}
