Functions:
Code:
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract Function {
    uint256 public number;
    function setNumber(uint256 _newNumber) public {
        number = _newNumber;
    }
    function doubleNumber() public {
        number *= 2;
    }
}

ii)Function Modifier:
Code:
pragma solidity ^0.8.0;

contract UserInfo {
    string public userName;
    uint public userAge;
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function.");
        _;
    }

    function setUserInfo(string memory name, uint age) public {
        userName = name;
        userAge = age;
    }

    function getUserInfo() public view returns (string memory, uint) {
        return (userName, userAge);
    }
}

ii)View Functions:
Code:
// SPDX-License-Identifier: MIT
pragma solidity 0.8.24;

contract HashContract {
    bytes32 private message;
    function hash1(string memory _msg) public {
        message = keccak256(bytes(_msg));
    }
    function getMsg() public view returns (bytes32){
        return message;
    }
}
iii)Pure Functions:
// SPDX-License-Identifier: MIT
pragma solidity 0.8.24;
contract Sol{
    function testAddMod() public pure returns (uint) {
        return addmod(4,5,3);
    }
    function testMulMod() public pure returns (uint) {
        return mulmod(4,5,3);
    }
}

